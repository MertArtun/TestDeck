import{_ as u}from"./index-5afd821c.js";import{p as o}from"./createLucideIcon-6899df1c.js";async function d(r){try{console.log("🃏 Yeni kart oluşturuluyor:",r);const t=await o("create_card",{card:r});return console.log("✅ Kart başarıyla oluşturuldu, ID:",t),t}catch(t){throw console.error("❌ Kart oluşturma hatası:",t),new Error(`Kart oluşturulamadı: ${t}`)}}async function w(r){try{console.log(`🃏 ${r.length} adet kart toplu olarak oluşturuluyor...`);const t=[];for(const e of r){const a=await d(e);t.push(a)}return console.log(`✅ ${t.length} kart başarıyla oluşturuldu`),t}catch(t){throw console.error("❌ Toplu kart oluşturma hatası:",t),new Error(`Kartlar oluşturulamadı: ${t}`)}}async function c(){try{console.log("📚 Tüm kartlar yükleniyor...");const r=await o("get_all_cards");return console.log(`✅ ${r.length} kart başarıyla yüklendi`),r}catch(r){throw console.error("❌ Kartları yükleme hatası:",r),new Error(`Kartlar yüklenemedi: ${r}`)}}async function h(r){try{console.log(`📖 ${r} konusundaki kartlar yükleniyor...`);const t=await o("get_cards_by_subject",{subject:r});return console.log(`✅ ${r} konusunda ${t.length} kart bulundu`),t}catch(t){throw console.error("❌ Konu kartlarını yükleme hatası:",t),new Error(`${r} kartları yüklenemedi: ${t}`)}}async function _(r,t){try{console.log(`🔄 Kart güncelleniyor, ID: ${r}`,t);const a=(await c()).find(n=>n.id===r);if(!a)throw new Error(`Kart bulunamadı: ${r}`);const l={...a,...t};await o("update_card",{id:r,card:l}),console.log(`✅ Kart başarıyla güncellendi, ID: ${r}`)}catch(e){throw console.error("❌ Kart güncelleme hatası:",e),new Error(`Kart güncellenemedi: ${e}`)}}async function p(r){try{console.log(`🗑️ Kart siliniyor, ID: ${r}`),await o("delete_card",{id:r}),console.log(`✅ Kart başarıyla silindi, ID: ${r}`)}catch(t){throw console.error("❌ Kart silme hatası:",t),new Error(`Kart silinemedi: ${t}`)}}async function b(){try{console.log("🗑️ Tüm kartlar ve ilgili veriler siliniyor..."),await o("delete_all_cards"),console.log("✅ Tüm kartlar başarıyla silindi")}catch(r){throw console.error("❌ Toplu kart silme hatası:",r),new Error(`Kartlar silinemedi: ${r}`)}}async function $(r){try{console.log("🎯 Yeni oturum oluşturuluyor:",r);const t=await o("create_session",{session:r});return console.log("✅ Oturum başarıyla oluşturuldu, ID:",t),t}catch(t){throw console.error("❌ Oturum oluşturma hatası:",t),new Error(`Oturum oluşturulamadı: ${t}`)}}async function f(r,t){try{console.log(`🏁 Oturum sonlandırılıyor, ID: ${r}, Doğru: ${t}`),await o("end_session",{sessionId:r,correctAnswers:t}),console.log(`✅ Oturum başarıyla sonlandırıldı, ID: ${r}`)}catch(e){throw console.error("❌ Oturum sonlandırma hatası:",e),new Error(`Oturum sonlandırılamadı: ${e}`)}}async function D(r){try{const t={...r,attempted_at:new Date().toISOString(),time_taken:r.time_spent??r.time_taken??0};console.log("📝 Deneme kaydediliyor:",t);const e=await o("record_attempt",{attempt:t});return console.log("✅ Deneme başarıyla kaydedildi, ID:",e),e}catch(t){throw console.error("❌ Deneme kaydetme hatası:",t),new Error(`Deneme kaydedilemedi: ${t}`)}}async function y(){try{console.log("📊 Konu istatistikleri yükleniyor...");const r=await o("get_subject_stats");return console.log(`✅ ${r.length} konu istatistiği yüklendi`),r}catch(r){throw console.error("❌ Konu istatistikleri yükleme hatası:",r),new Error(`Konu istatistikleri yüklenemedi: ${r}`)}}async function g(r=30){try{console.log(`📈 Son ${r} günün istatistikleri yükleniyor...`);const t=await o("get_daily_stats",{days:r});return console.log(`✅ ${t.length} günlük istatistik yüklendi`),t.map(a=>({date:a.date,questions_answered:a.questions_answered??a.total_questions??0,correct_answers:a.correct_answers??0,accuracy:a.accuracy??0,study_time:a.study_time??0}))}catch(t){throw console.error("❌ Günlük istatistikler yükleme hatası:",t),new Error(`Günlük istatistikler yüklenemedi: ${t}`)}}async function S(r,t){try{console.log(`📊 Kart istatistiği güncellendi: ${r}, Doğru: ${t}`)}catch(e){console.error("❌ Kart istatistiği güncelleme hatası:",e)}}async function K(){try{console.log("🗄️ Veritabanı başlatılıyor..."),await c(),console.log("✅ Veritabanı başarıyla başlatıldı")}catch(r){throw console.error("❌ Veritabanı başlatma hatası:",r),new Error(`Veritabanı başlatılamadı: ${r}`)}}function E(){return{type:"sqlite",status:"connected",location:"app_data/testdeck.db"}}async function I(){try{console.log("📤 Veriler dışa aktarılıyor...");const r=await c(),t=await y(),e=await g(365),a={cards:r,subjectStats:t,dailyStats:e,exportedAt:new Date().toISOString(),version:"2.0-sqlite"},{save:l}=await u(()=>import("./createLucideIcon-6899df1c.js").then(i=>i.q),["assets/createLucideIcon-6899df1c.js","assets/index-5afd821c.js","assets/index-dc4438df.css"]),{writeTextFile:n}=await u(()=>import("./createLucideIcon-6899df1c.js").then(i=>i.t),["assets/createLucideIcon-6899df1c.js","assets/index-5afd821c.js","assets/index-dc4438df.css"]),s=await l({filters:[{name:"TestDeck Backup",extensions:["json"]}],defaultPath:`testdeck-backup-${new Date().toISOString().split("T")[0]}.json`});s&&(await n(s,JSON.stringify(a,null,2)),console.log("✅ Veriler başarıyla dışa aktarıldı:",s))}catch(r){throw console.error("❌ Veri dışa aktarma hatası:",r),new Error(`Veriler dışa aktarılamadı: ${r}`)}}async function C(){try{console.log("🔄 localStorage verilerinden SQLite'e geçiş yapılıyor...");const r=localStorage.getItem("testdeck-data");if(!r){console.log("ℹ️ Geçirilecek localStorage verisi bulunamadı");return}const t=JSON.parse(r);if(!t.cards||!Array.isArray(t.cards)){console.log("ℹ️ Geçerli kart verisi bulunamadı");return}console.log(`📦 ${t.cards.length} kart geçiriliyor...`);let e=0;for(const a of t.cards)try{const l={question:a.question||"",option_a:a.option_a||null,option_b:a.option_b||null,option_c:a.option_c||null,option_d:a.option_d||null,option_e:a.option_e||null,correct_answer:a.correct_answer||null,blank_answer:a.blank_answer||null,question_type:a.question_type||"multiple_choice",subject:a.subject||"Genel",difficulty:a.difficulty||1,image_path:a.image_path||null};await d(l),e++}catch(l){console.warn("⚠️ Kart geçirilemedi:",a,l)}console.log(`✅ ${e} kart başarıyla SQLite'e geçirildi`),localStorage.setItem("testdeck-data-backup",r),localStorage.removeItem("testdeck-data"),console.log("🧹 localStorage temizlendi, yedek oluşturuldu")}catch(r){throw console.error("❌ Veri geçiş hatası:",r),new Error(`Veriler geçirilemedi: ${r}`)}}export{d as createCard,w as createMultipleCards,$ as createSession,b as deleteAllCards,p as deleteCard,f as endSession,I as exportUserData,c as getAllCards,h as getCardsBySubject,g as getDailyStats,E as getDatabase,y as getSubjectStats,K as initDatabase,C as migrateFromLocalStorage,D as recordAttempt,_ as updateCard,S as updateCardStats};
